{"ast":null,"code":"// File: ./src/flow/profile-set-name.tx.js\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nexport async function setName(name) {\n  const txId = await fcl.send([fcl.proposer(fcl.authz), fcl.payer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.limit(35), fcl.args([fcl.arg(name, t.String)]), fcl.transaction`\n        import Profile from 0xProfile\n\n        transaction(name: String) {\n          prepare(account: AuthAccount) {\n            account\n              .borrow<&Profile.Base{Profile.Owner}>(from: Profile.privatePath)!\n              .setName(name)\n          }\n        }\n      `]).then(fcl.decode);\n  return fcl.tx(txId).onceSealed();\n}","map":{"version":3,"sources":["/Users/EliFinkel/Desktop/TestProject/frontend/src/flow/profile-set-name.tx.js"],"names":["fcl","t","setName","name","txId","send","proposer","authz","payer","authorizations","limit","args","arg","String","transaction","then","decode","tx","onceSealed"],"mappings":"AAAA;AAEA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AAEA,OAAO,eAAeC,OAAf,CAAuBC,IAAvB,EAA6B;AAClC,QAAMC,IAAI,GAAG,MAAMJ,GAAG,CACnBK,IADgB,CACX,CACJL,GAAG,CAACM,QAAJ,CAAaN,GAAG,CAACO,KAAjB,CADI,EAEJP,GAAG,CAACQ,KAAJ,CAAUR,GAAG,CAACO,KAAd,CAFI,EAGJP,GAAG,CAACS,cAAJ,CAAmB,CAACT,GAAG,CAACO,KAAL,CAAnB,CAHI,EAIJP,GAAG,CAACU,KAAJ,CAAU,EAAV,CAJI,EAKJV,GAAG,CAACW,IAAJ,CAAS,CAACX,GAAG,CAACY,GAAJ,CAAQT,IAAR,EAAcF,CAAC,CAACY,MAAhB,CAAD,CAAT,CALI,EAMJb,GAAG,CAACc,WAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAhBU,CADW,EAmBhBC,IAnBgB,CAmBXf,GAAG,CAACgB,MAnBO,CAAnB;AAqBA,SAAOhB,GAAG,CAACiB,EAAJ,CAAOb,IAAP,EAAac,UAAb,EAAP;AACD","sourcesContent":["// File: ./src/flow/profile-set-name.tx.js\n\nimport * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\n\nexport async function setName(name) {\n  const txId = await fcl\n    .send([\n      fcl.proposer(fcl.authz),\n      fcl.payer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.limit(35),\n      fcl.args([fcl.arg(name, t.String)]),\n      fcl.transaction`\n        import Profile from 0xProfile\n\n        transaction(name: String) {\n          prepare(account: AuthAccount) {\n            account\n              .borrow<&Profile.Base{Profile.Owner}>(from: Profile.privatePath)!\n              .setName(name)\n          }\n        }\n      `,\n    ])\n    .then(fcl.decode)\n\n  return fcl.tx(txId).onceSealed()\n}"]},"metadata":{},"sourceType":"module"}