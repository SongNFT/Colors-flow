{"ast":null,"code":"import { isTransaction as e, Ok as r, pipe as o, interaction as t } from \"@onflow/interaction\";\nimport { send as n } from \"@onflow/send\";\nimport { decodeResponse as i } from \"@onflow/decode\";\nimport { getLatestBlock as s } from \"@onflow/sdk-build-get-latest-block\";\n\nfunction c(c) {\n  return function (m) {\n    try {\n      return e(m) ? m.message.refBlock ? Promise.resolve(r(m)) : Promise.resolve(function (e) {\n        try {\n          var r;\n          return Promise.resolve(o(t(), [s()])).then(function (o) {\n            return r = o, Promise.resolve(n(r, e)).then(function (e) {\n              return r = e, Promise.resolve(i(r)).then(function (e) {\n                return (r = e).id;\n              });\n            });\n          });\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }(c)).then(function (e) {\n        return m.message.refBlock = e, r(m);\n      }) : Promise.resolve(r(m));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nexport { c as resolveRefBlockId };","map":{"version":3,"sources":["../src/index.js"],"names":["opts","ix","pipe","interaction","getLatestBlock","send","decodeResponse","id","resolveRefBlockId","isTransaction","Ok","message","refBlock","getRefId"],"mappings":";;;;;SAagBQ,C,CAAkBR,C,EAAAA;AAChC,SAAA,UAAaC,CAAb,EAAaA;AAAAA,QAAAA;AACX,aAAKQ,CAAAA,CAAcR,CAAdQ,CAAAA,GACDR,CAAAA,CAAGU,OAAHV,CAAWW,QAAXX,GAAWW,OAAAA,CAAAA,OAAAA,CAAiBF,CAAAA,CAAGT,CAAHS,CAAjBE,CAAXX,GAA+BA,OAAAA,CAAAA,OAAAA,CAAAA,UAXdD,CAWcC,EAXdD;AAAAA,YAAAA;AACvB,cAAIC,CAAJ;AAD6B,iBAAA,OAAA,CAAA,OAAA,CAElBC,CAAAA,CAAKC,CAAAA,EAALD,EAAoB,CAACE,CAAAA,EAAD,CAApBF,CAFkB,EAEGE,IAFH,CAEGA,UAAAA,CAAAA,EAAAA;AAFH,mBAE7BH,CAAAA,GAAAA,CAAAA,EAAAA,OAAAA,CAAAA,OAAAA,CACWI,CAAAA,CAAKJ,CAALI,EAASL,CAATK,CADXJ,EACoBD,IADpBC,CACoBD,UAAAA,CAAAA,EAAAA;AAHS,qBAG7BC,CAAAA,GAAAA,CAAAA,EAAAA,OAAAA,CAAAA,OAAAA,CACWK,CAAAA,CAAeL,CAAfK,CADXL,EAC0BA,IAD1BA,CAC0BA,UAAAA,CAAAA,EAAAA;AAC1B,uBAAA,CADAA,CAAAA,GAAAA,CACA,EAAUM,EAAV;AAAUA,eAFVN,CAH6B;AAKnBM,aAHVN,CAF6B;AAKnBM,WALmB,CAAA;AAKnBA,SALaP,CAKbO,OAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAQoBM,OAFOZ,CAEED,CAFFC,CAAAA,EAEED,IAFFC,CAEED,UAAAA,CAAAA,EAAAA;AAErC,eAFAC,CAAAA,CAAGU,OAAHV,CAAWW,QAAXX,GAAWW,CAAXX,EAEOS,CAAAA,CAAGT,CAAHS,CAAP;AAAUT,OAJyBA,CAD9BQ,GAKKR,OAAAA,CAAAA,OAAAA,CALqBS,CAAAA,CAAGT,CAAHS,CAKrBT,CALV;AADF,KAAaA,CAAb,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;AAAA;;AAAA,SAAA,CAAA,IAAA,iBAAA","sourcesContent":["import {isTransaction, Ok, interaction, pipe} from \"@onflow/interaction\"\nimport {send} from \"@onflow/send\"\nimport {decodeResponse} from \"@onflow/decode\"\nimport {getLatestBlock} from \"@onflow/sdk-build-get-latest-block\"\n\nasync function getRefId (opts) {\n  var ix\n  ix = await pipe(interaction(), [getLatestBlock()])\n  ix = await send(ix, opts)\n  ix = await decodeResponse(ix)\n  return ix.id\n}\n\nexport function resolveRefBlockId(opts) {\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix)\n    if (ix.message.refBlock) return Ok(ix)\n\n    ix.message.refBlock = await getRefId(opts)\n\n    return Ok(ix)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}