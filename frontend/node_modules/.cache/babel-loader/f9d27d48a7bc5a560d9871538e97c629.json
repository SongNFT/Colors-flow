{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eli\\\\Desktop\\\\Colors-Flow\\\\frontend\\\\src\\\\MintColor.js\";\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as sdk from \"@onflow/sdk\";\nimport \"./MintColor.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MintColor = () => {\n  const MintColorToken = async () => {\n    await sdk.build([fcl.script`\n        import ColorItems from 0xProfile\n        transaction {\n            let receiverRef: &{ColorItems.NFTReceiver}\n            let minterRef: &ColorItems.NFTMinter\n\n            prepare(acct: AuthAccount) {\n                self.receiverRef = acct.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow receiver reference\")        \n                \n                self.minterRef = acct.borrow<&ColorItems.NFTMinter>(from: /storage/NFTMinter)\n                    ?? panic(\"could not borrow minter reference\")\n        }\n        execute {\n            let metadata : {String : String} = {\n                \"color\": \"#90323d\",\n                \"name\": \"red violet color wheel\",\n                \"price\": \"40\"\n            }\n            let newNFT <- self.minterRef.mintNFT()\n        \n            self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n\n            log(\"NFT Minted and deposited\")\n            \n            }\n        }\n      `]); //const decoded = await fcl.decode(encoded)\n    //console.log(\"Return: \" + decoded)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: MintColorToken,\n      className: \"minter\",\n      children: \"Mint Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MintColor;\nexport default MintColor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintColor\");","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/MintColor.js"],"names":["React","useState","fcl","sdk","MintColor","MintColorToken","build","script"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAEtB,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMF,GAAG,CACNG,KADG,CACG,CACLJ,GAAG,CAACK,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA7Ba,CADH,CAAN,CADiC,CAkCjC;AACA;AACD,GApCD;;AAqCA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACK;AAAQ,MAAA,OAAO,EAAEF,cAAjB;AAAiC,MAAA,SAAS,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5CD;;KAAMD,S;AA8CN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport * as fcl from \"@onflow/fcl\";\r\nimport * as sdk from \"@onflow/sdk\"\r\nimport \"./MintColor.css\"\r\n\r\nconst MintColor = () => {\r\n  \r\n  const MintColorToken = async () => {\r\n    await sdk\r\n      .build([\r\n        fcl.script`\r\n        import ColorItems from 0xProfile\r\n        transaction {\r\n            let receiverRef: &{ColorItems.NFTReceiver}\r\n            let minterRef: &ColorItems.NFTMinter\r\n\r\n            prepare(acct: AuthAccount) {\r\n                self.receiverRef = acct.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\r\n                    .borrow()\r\n                    ?? panic(\"Could not borrow receiver reference\")        \r\n                \r\n                self.minterRef = acct.borrow<&ColorItems.NFTMinter>(from: /storage/NFTMinter)\r\n                    ?? panic(\"could not borrow minter reference\")\r\n        }\r\n        execute {\r\n            let metadata : {String : String} = {\r\n                \"color\": \"#90323d\",\r\n                \"name\": \"red violet color wheel\",\r\n                \"price\": \"40\"\r\n            }\r\n            let newNFT <- self.minterRef.mintNFT()\r\n        \r\n            self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\r\n\r\n            log(\"NFT Minted and deposited\")\r\n            \r\n            }\r\n        }\r\n      `\r\n      ])\r\n    \r\n    //const decoded = await fcl.decode(encoded)\r\n    //console.log(\"Return: \" + decoded)\r\n  };\r\n  return (\r\n    <div className=\"mint\">\r\n         <button onClick={MintColorToken} className=\"minter\">Mint Token</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MintColor;"]},"metadata":{},"sourceType":"module"}