{"ast":null,"code":"import { pipe as r, interaction as o } from \"@onflow/interaction\";\nimport { send as e } from \"@onflow/send\";\nimport { resolve as n } from \"@onflow/sdk-resolve\";\nimport { config as t } from \"@onflow/config\";\n\nvar s = function (s, i) {\n  void 0 === s && (s = []), void 0 === i && (i = {});\n\n  try {\n    return Promise.resolve(t().get(\"sdk.send\", i.send || e)).then(function (e) {\n      return Promise.resolve(t().get(\"sdk.resolve\", i.resolve || n(i))).then(function (n) {\n        return Array.isArray(s) && (s = r(o(), s)), Promise.resolve(n(s)).then(function (r) {\n          return e(r, i);\n        });\n      });\n    });\n  } catch (r) {\n    return Promise.reject(r);\n  }\n};\n\nexport { s as send };","map":{"version":3,"sources":["../src/index.js"],"names":["send","args","opts","sendFunction","config","get","defaultSend","resolveFunction","resolve","defaultResolve","Array","isArray","pipe","interaction"],"mappings":";;;;;AAKaA,IAAAA,CAAAA,GAAAA,UAAcC,CAAdD,EAAyBE,CAAzBF,EAAyBE;AAAAA,OAAAA,CAAAA,KAAXD,CAAWC,KAAXD,CAAAA,GAAO,EAAIC,GAAJ,KAAA,CAAA,KAAIA,CAAJ,KAAIA,CAAAA,GAAO,EAAX,CAAIA;;AAAO,MAAA;AAAA,WAAA,OAAA,CAAA,OAAA,CAChBE,CAAAA,GAASC,GAATD,CAAa,UAAbA,EAAyBF,CAAAA,CAAKF,IAALE,IAAaI,CAAtCF,CADgB,EACsBE,IADtB,CACsBA,UAA3DH,CAA2DG,EAA3DH;AAAAA,aAAAA,OAAAA,CAAAA,OAAAA,CACwBC,CAAAA,GAASC,GAATD,CAC5B,aAD4BA,EAE5BF,CAAAA,CAAKM,OAALN,IAAgBO,CAAAA,CAAeP,CAAfO,CAFYL,CADxBD,EAG2BD,IAH3BC,CAG2BD,UAF3BK,CAE2BL,EAF3BK;AAF4C,eAM9CG,KAAAA,CAAMC,OAAND,CAAcT,CAAdS,MAAqBT,CAAAA,GAAOW,CAAAA,CAAKC,CAAAA,EAALD,EAAoBX,CAApBW,CAA5BF,GAAgDT,OAAAA,CAAAA,OAAAA,CAC1BM,CAAAA,CAAgBN,CAAhBM,CAD0BN,EACVA,IADUA,CACVA,UAAAA,CAAAA,EAAAA;AAA1C,iBAAOE,CAAAA,CAAAA,CAAAA,EAA0CD,CAA1CC,CAAP;AAAiDD,SADGD,CANF;AAODC,OAN3CC,CAAAA;AAM2CD,KAPN,CAAA;AAA5B,GAA4B,CAA5B,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAAJF;;AAAI,SAAA,CAAA,IAAA,IAAA","sourcesContent":["import {interaction, pipe} from \"@onflow/interaction\"\nimport {send as defaultSend} from \"@onflow/send\"\nimport {resolve as defaultResolve} from \"@onflow/sdk-resolve\"\nimport {config} from \"@onflow/config\"\n\nexport const send = async (args = [], opts = {}) => {\n  const sendFunction = await config().get(\"sdk.send\", opts.send || defaultSend)\n  const resolveFunction = await config().get(\n    \"sdk.resolve\",\n    opts.resolve || defaultResolve(opts)\n  )\n  if (Array.isArray(args)) args = pipe(interaction(), args)\n  return sendFunction(await resolveFunction(args), opts)\n}\n"]},"metadata":{},"sourceType":"module"}