{"ast":null,"code":"var t = function (t, n, e) {\n  return {\n    label: t,\n    asArgument: n,\n    asInjection: e\n  };\n},\n    n = function (t) {\n  return Array.isArray(t);\n},\n    e = function (t) {\n  return \"object\" == typeof t;\n},\n    r = function (t) {\n  return null == t;\n},\n    u = function (t) {\n  return \"number\" == typeof t;\n},\n    i = function (t) {\n  return Number.isInteger(t);\n},\n    o = function (t) {\n  return \"string\" == typeof t;\n},\n    f = function (t) {\n  throw new Error(\"Type Error: \" + t);\n},\n    c = t(\"Identity\", function (t) {\n  return t;\n}, function (t) {\n  return t;\n}),\n    a = t(\"UInt\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt\",\n    value: t.toString()\n  };\n  f(\"Expected Positive Integer for type Unsigned Int\");\n}, function (t) {\n  return t;\n}),\n    p = t(\"Int\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int\",\n    value: t.toString()\n  };\n  f(\"Expected Integer for type Int\");\n}, function (t) {\n  return t;\n}),\n    l = t(\"UInt8\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt8\",\n    value: t.toString()\n  };\n  f(\"Expected integer for UInt8\");\n}, function (t) {\n  return t;\n}),\n    d = t(\"Int8\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int8\",\n    value: t.toString()\n  };\n  f(\"Expected positive integer for Int8\");\n}, function (t) {\n  return t;\n}),\n    v = t(\"UInt16\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt16\",\n    value: t.toString()\n  };\n  f(\"Expected integer for UInt16\");\n}, function (t) {\n  return t;\n}),\n    s = t(\"Int16\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int16\",\n    value: t.toString()\n  };\n  f(\"Expected positive integer for Int16\");\n}, function (t) {\n  return t;\n}),\n    y = t(\"UInt32\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt32\",\n    value: t.toString()\n  };\n  f(\"Expected integer for UInt32\");\n}, function (t) {\n  return t;\n}),\n    g = t(\"Int32\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int32\",\n    value: t.toString()\n  };\n  f(\"Expected positive integer for Int32\");\n}, function (t) {\n  return t;\n}),\n    m = t(\"UInt64\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt64\",\n    value: t.toString()\n  };\n  f(\"Expected integer for UInt64\");\n}, function (t) {\n  return t;\n}),\n    I = t(\"Int64\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int64\",\n    value: t.toString()\n  };\n  f(\"Expected positive integer for Int64\");\n}, function (t) {\n  return t;\n}),\n    x = t(\"UInt128\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt128\",\n    value: t.toString()\n  };\n  f(\"Expected integer for UInt128\");\n}, function (t) {\n  return t;\n}),\n    E = t(\"Int128\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int128\",\n    value: t.toString()\n  };\n  f(\"Expected positive integer for Int128\");\n}, function (t) {\n  return t;\n}),\n    S = t(\"UInt256\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"UInt256\",\n    value: t.toString()\n  };\n  f(\"Expected integer for UInt256\");\n}, function (t) {\n  return t;\n}),\n    U = t(\"Int256\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Int256\",\n    value: t.toString()\n  };\n  f(\"Expected integer for Int256\");\n}, function (t) {\n  return t;\n}),\n    A = t(\"Word8\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Word8\",\n    value: t.toString()\n  };\n  f(\"Expected positive number for Word8\");\n}, function (t) {\n  return t;\n}),\n    b = t(\"Word16\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Word16\",\n    value: t.toString()\n  };\n  f(\"Expected positive number for Word16\");\n}, function (t) {\n  return t;\n}),\n    W = t(\"Word32\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Word32\",\n    value: t.toString()\n  };\n  f(\"Expected positive number for Word32\");\n}, function (t) {\n  return t;\n}),\n    k = t(\"Word64\", function (t) {\n  if (u(t) && i(t)) return {\n    type: \"Word64\",\n    value: t.toString()\n  };\n  f(\"Expected positive number for Word64\");\n}, function (t) {\n  return t;\n}),\n    F = function () {\n  console.error(\"\\n          %c@onflow/types Deprecation Notice\\n          ========================\\n\\n          Passing in Numbers as values for Fix64 and UFix64 types is deprecated and will cease to work in future releases of @onflow/types.\\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\\n\\n          =======================\\n        \".replace(/\\n\\s+/g, \"\\n\").trim(), \"font-weight:bold;font-family:monospace;\");\n},\n    h = t(\"UFix64\", function (t) {\n  return o(t) ? {\n    type: \"UFix64\",\n    value: t\n  } : u(t) ? (F(), {\n    type: \"UFix64\",\n    value: t.toString()\n  }) : void f(\"Expected String for UFix64\");\n}, function (t) {\n  return t;\n}),\n    w = t(\"Fix64\", function (t) {\n  return o(t) ? {\n    type: \"Fix64\",\n    value: t\n  } : u(t) ? (F(), {\n    type: \"Fix64\",\n    value: t.toString()\n  }) : void f(\"Expected String for Fix64\");\n}, function (t) {\n  return t;\n}),\n    j = t(\"String\", function (t) {\n  if (o(t)) return {\n    type: \"String\",\n    value: t\n  };\n  f(\"Expected String for type String\");\n}, function (t) {\n  return t;\n}),\n    O = t(\"Character\", function (t) {\n  if (o(t)) return {\n    type: \"Character\",\n    value: t\n  };\n  f(\"Expected Character for type Character\");\n}, function (t) {\n  return t;\n}),\n    R = t(\"Bool\", function (t) {\n  if (\"boolean\" == typeof t) return {\n    type: \"Bool\",\n    value: t\n  };\n  f(\"Expected Boolean for type Bool\");\n}, function (t) {\n  return t;\n}),\n    N = t(\"Address\", function (t) {\n  if (o(t)) return {\n    type: \"Address\",\n    value: t\n  };\n  f(\"Expected Address for type Address\");\n}, function (t) {\n  return t;\n}),\n    B = t(\"Void\", function (t) {\n  if (!t || r(t)) return {\n    type: \"Void\"\n  };\n  f(\"Expected Void for type Void\");\n}, function (t) {\n  return t;\n}),\n    C = function (n) {\n  return t(\"Optional\", function (t) {\n    return {\n      type: \"Optional\",\n      value: r(t) ? null : n.asArgument(t)\n    };\n  }, function (t) {\n    return t;\n  });\n},\n    D = t(\"Reference\", function (t) {\n  if (e(t)) return {\n    type: \"Reference\",\n    value: t\n  };\n  f(\"Expected Object for type Reference\");\n}, function (t) {\n  return t;\n}),\n    V = function (e) {\n  return void 0 === e && (e = []), t(\"Array\", function (t) {\n    return {\n      type: \"Array\",\n      value: n(e) ? e.map(function (n, e) {\n        return n.asArgument(t[e]);\n      }) : t.map(function (t) {\n        return e.asArgument(t);\n      })\n    };\n  }, function (t) {\n    return t;\n  });\n},\n    P = function (r) {\n  return void 0 === r && (r = []), t(\"Dictionary\", function (t) {\n    if (e(t)) return {\n      type: \"Dictionary\",\n      value: n(r) ? r.map(function (n, e) {\n        return {\n          key: n.key.asArgument(t[e].key),\n          value: n.value.asArgument(t[e].value)\n        };\n      }) : n(t) ? t.map(function (t) {\n        return {\n          key: r.key.asArgument(t.key),\n          value: r.value.asArgument(t.value)\n        };\n      }) : [{\n        key: r.key.asArgument(t.key),\n        value: r.value.asArgument(t.value)\n      }]\n    };\n    f(\"Expected Object for type Dictionary\");\n  }, function (t) {\n    return t;\n  });\n},\n    G = function (r, u) {\n  return void 0 === u && (u = []), t(\"Event\", function (t) {\n    if (e(t)) return {\n      type: \"Event\",\n      value: {\n        id: r,\n        fields: n(u) ? u.map(function (n, e) {\n          return {\n            name: t.fields[e].name,\n            value: n.value.asArgument(t.fields[e].value)\n          };\n        }) : t.fields.map(function (t) {\n          return {\n            name: t.name,\n            value: u.value.asArgument(t.value)\n          };\n        })\n      }\n    };\n    f(\"Expected Object for type Event\");\n  }, function (t) {\n    return t;\n  });\n},\n    T = function (r, u) {\n  return void 0 === u && (u = []), t(\"Resource\", function (t) {\n    if (e(t)) return {\n      type: \"Resource\",\n      value: {\n        id: r,\n        fields: n(u) ? u.map(function (n, e) {\n          return {\n            name: t.fields[e].name,\n            value: n.value.asArgument(t.fields[e].value)\n          };\n        }) : t.fields.map(function (t) {\n          return {\n            name: t.name,\n            value: u.value.asArgument(t.value)\n          };\n        })\n      }\n    };\n    f(\"Expected Object for type Resource\");\n  }, function (t) {\n    return t;\n  });\n},\n    q = function (r, u) {\n  return void 0 === u && (u = []), t(\"Struct\", function (t) {\n    if (e(t)) return {\n      type: \"Struct\",\n      value: {\n        id: r,\n        fields: n(u) ? u.map(function (n, e) {\n          return {\n            name: t.fields[e].name,\n            value: n.value.asArgument(t.fields[e].value)\n          };\n        }) : t.fields.map(function (t) {\n          return {\n            name: t.name,\n            value: u.value.asArgument(t.value)\n          };\n        })\n      }\n    };\n    f(\"Expected Object for type Struct\");\n  }, function (t) {\n    return t;\n  });\n};\n\nexport { N as Address, V as Array, R as Bool, O as Character, P as Dictionary, G as Event, w as Fix64, c as Identity, p as Int, E as Int128, s as Int16, U as Int256, g as Int32, I as Int64, d as Int8, C as Optional, D as Reference, T as Resource, j as String, q as Struct, h as UFix64, a as UInt, x as UInt128, v as UInt16, S as UInt256, y as UInt32, m as UInt64, l as UInt8, B as Void, b as Word16, W as Word32, k as Word64, A as Word8, V as _Array };","map":{"version":3,"sources":["../src/types.js"],"names":["type","label","asArgument","asInjection","isArray","d","Array","isObj","isNull","isNumber","isInteger","Number","isString","throwTypeError","msg","Error","Identity","v","UInt","value","toString","Int","UInt8","Int8","UInt16","Int16","UInt32","Int32","UInt64","Int64","UInt128","Int128","UInt256","Int256","Word8","Word16","Word32","Word64","UFix64AndFix64NumberDeprecationNotice","console","error","replace","trim","UFix64","Fix64","String","Character","Bool","Address","Void","Optional","children","Reference","_Array","map","c","i","x","Dictionary","key","Event","id","fields","name","Resource","Struct"],"mappings":"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","sourcesContent":["const type = (label, asArgument, asInjection) => ({\n  label,\n  asArgument,\n  asInjection,\n})\n\nconst isArray = (d) => Array.isArray(d)\nconst isObj = (d) => typeof d === \"object\"\nconst isNull = (d) => d == null\nconst isBoolean = (d) => typeof d === \"boolean\"\nconst isNumber = (d) => typeof d === \"number\"\nconst isInteger = (d) => Number.isInteger(d)\nconst isString = (d) => typeof d === \"string\"\n\nconst throwTypeError = (msg) => {\n  throw new Error(\"Type Error: \" + msg)\n}\n\nexport const Identity = type(\n  \"Identity\",\n  (v) => v,\n  (v) => v\n)\n\nexport const UInt = type(\n  \"UInt\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected Positive Integer for type Unsigned Int\")\n  },\n  (v) => v\n)\n\nexport const Int = type(\n  \"Int\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected Integer for type Int\")\n  },\n  (v) => v\n)\n\nexport const UInt8 = type(\n  \"UInt8\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt8\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt8\")\n  },\n  (v) => v\n)\n\nexport const Int8 = type(\n  \"Int8\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int8\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int8\")\n  },\n  (v) => v\n)\n\nexport const UInt16 = type(\n  \"UInt16\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt16\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt16\")\n  },\n  (v) => v\n)\n\nexport const Int16 = type(\n  \"Int16\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int16\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int16\")\n  },\n  (v) => v\n)\n\nexport const UInt32 = type(\n  \"UInt32\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt32\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt32\")\n  },\n  (v) => v\n)\n\nexport const Int32 = type(\n  \"Int32\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int32\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int32\")\n  },\n  (v) => v\n)\n\nexport const UInt64 = type(\n  \"UInt64\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt64\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt64\")\n  },\n  (v) => v\n)\n\nexport const Int64 = type(\n  \"Int64\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int64\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int64\")\n  },\n  (v) => v\n)\n\nexport const UInt128 = type(\n  \"UInt128\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt128\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt128\")\n  },\n  (v) => v\n)\n\nexport const Int128 = type(\n  \"Int128\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int128\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive integer for Int128\")\n  },\n  (v) => v\n)\n\nexport const UInt256 = type(\n  \"UInt256\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"UInt256\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for UInt256\")\n  },\n  (v) => v\n)\n\nexport const Int256 = type(\n  \"Int256\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Int256\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected integer for Int256\")\n  },\n  (v) => v\n)\n\nexport const Word8 = type(\n  \"Word8\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word8\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word8\")\n  },\n  (v) => v\n)\n\nexport const Word16 = type(\n  \"Word16\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word16\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word16\")\n  },\n  (v) => v\n)\n\nexport const Word32 = type(\n  \"Word32\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word32\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word32\")\n  },\n  (v) => v\n)\n\nexport const Word64 = type(\n  \"Word64\",\n  (v) => {\n    if (isNumber(v) && isInteger(v))\n      return {\n        type: \"Word64\",\n        value: v.toString(),\n      }\n    throwTypeError(\"Expected positive number for Word64\")\n  },\n  (v) => v\n)\n\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/types Deprecation Notice\n          ========================\n\n          Passing in Numbers as values for Fix64 and UFix64 types is deprecated and will cease to work in future releases of @onflow/types.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport const UFix64 = type(\n  \"UFix64\",\n  (v) => {\n    if (isString(v)) {\n      return {\n        type: \"UFix64\",\n        value: v\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"UFix64\",\n        value: v.toString()\n      }\n    }\n    throwTypeError(\"Expected String for UFix64\")\n  },\n  (v) => v\n)\n\nexport const Fix64 = type(\n  \"Fix64\",\n  (v) => {\n    if (isString(v)) {\n      return {\n        type: \"Fix64\",\n        value: v\n      }\n    } else if (isNumber(v)) {\n      UFix64AndFix64NumberDeprecationNotice()\n      return {\n        type: \"Fix64\",\n        value: v.toString()\n      }\n    }\n    throwTypeError(\"Expected String for Fix64\")\n  },\n  (v) => v\n)\n\nexport const String = type(\n  \"String\",\n  (v) => {\n    if (isString(v))\n      return {\n        type: \"String\",\n        value: v,\n      }\n    throwTypeError(\"Expected String for type String\")\n  },\n  (v) => v\n)\n\nexport const Character = type(\n  \"Character\",\n  (v) => {\n    if (isString(v))\n      return {\n        type: \"Character\",\n        value: v,\n      }\n    throwTypeError(\"Expected Character for type Character\")\n  },\n  (v) => v\n)\n\nexport const Bool = type(\n  \"Bool\",\n  (v) => {\n    if (isBoolean(v))\n      return {\n        type: \"Bool\",\n        value: v,\n      }\n    throwTypeError(\"Expected Boolean for type Bool\")\n  },\n  (v) => v\n)\n\nexport const Address = type(\n  \"Address\",\n  (v) => {\n    if (isString(v))\n      return {\n        type: \"Address\",\n        value: v,\n      }\n    throwTypeError(\"Expected Address for type Address\")\n  },\n  (v) => v\n)\n\nexport const Void = type(\n  \"Void\",\n  (v) => {\n    if (!v || isNull(v))\n      return {\n        type: \"Void\",\n      }\n    throwTypeError(\"Expected Void for type Void\")\n  },\n  (v) => v\n)\n\nexport const Optional = (children) =>\n  type(\n    \"Optional\",\n    (v) => ({\n      type: \"Optional\",\n      value: isNull(v) ? null : children.asArgument(v),\n    }),\n    (v) => v\n  )\n\nexport const Reference = type(\n  \"Reference\",\n  (v) => {\n    if (isObj(v))\n      return {\n        type: \"Reference\",\n        value: v,\n      }\n    throwTypeError(\"Expected Object for type Reference\")\n  },\n  (v) => v\n)\n\nexport const _Array = (children = []) =>\n  type(\n    \"Array\",\n    (v) => {\n      return {\n        type: \"Array\",\n        value: isArray(children)\n          ? children.map((c, i) => c.asArgument(v[i]))\n          : v.map((x) => children.asArgument(x)),\n      }\n    },\n    (v) => v\n  )\n\nexport {_Array as Array}\n\nexport const Dictionary = (children = []) =>\n  type(\n    \"Dictionary\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Dictionary\",\n          value: isArray(children)\n            ? children.map((c, i) => ({\n                key: c.key.asArgument(v[i].key),\n                value: c.value.asArgument(v[i].value),\n              }))\n            : isArray(v)\n            ? v.map((x) => ({\n                key: children.key.asArgument(x.key),\n                value: children.value.asArgument(x.value),\n              }))\n            : [\n                {\n                  key: children.key.asArgument(v.key),\n                  value: children.value.asArgument(v.value),\n                },\n              ],\n        }\n      throwTypeError(\"Expected Object for type Dictionary\")\n    },\n    (v) => v\n  )\n\nexport const Event = (id, fields = []) =>\n  type(\n    \"Event\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Event\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map((x) => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      throwTypeError(\"Expected Object for type Event\")\n    },\n    (v) => v\n  )\n\nexport const Resource = (id, fields = []) =>\n  type(\n    \"Resource\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Resource\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map((x) => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      throwTypeError(\"Expected Object for type Resource\")\n    },\n    (v) => v\n  )\n\nexport const Struct = (id, fields = []) =>\n  type(\n    \"Struct\",\n    (v) => {\n      if (isObj(v))\n        return {\n          type: \"Struct\",\n          value: {\n            id: id,\n            fields: isArray(fields)\n              ? fields.map((c, i) => ({\n                  name: v.fields[i].name,\n                  value: c.value.asArgument(v.fields[i].value),\n                }))\n              : v.fields.map((x) => ({\n                  name: x.name,\n                  value: fields.value.asArgument(x.value),\n                })),\n          },\n        }\n      throwTypeError(\"Expected Object for type Struct\")\n    },\n    (v) => v\n  )\n"]},"metadata":{},"sourceType":"module"}