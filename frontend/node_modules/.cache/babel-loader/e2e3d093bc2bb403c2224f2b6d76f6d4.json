{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eli\\\\Desktop\\\\Colors-Flow\\\\frontend\\\\src\\\\TokenData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport \"./TokenData.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenData = () => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null);\n\n  const fetchTokenData = async () => {\n    const encoded = await fcl.send([fcl.script`\n        import ColorItems from address\n\n        pub fun main() : {String : String} {\n            let nftOwner = getAccount(address)\n            // log(\"NFT Owner\")   \n            let capability = nftOwner.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\n\n            let receiverRef = capability.borrow()\n                ?? panic(\"Could not borrow the receiver reference\")\n\n            return receiverRef.getMetadata(id: 1)\n        }\n      `, fcl.args(\"0xf8d6e0586b0a20c7\", t.Address)]);\n    const decoded = await fcl.decode(encoded);\n    setNftInfo(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-data\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: fetchTokenData,\n        children: \"Fetch Token Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), nftInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colorToken\",\n        style: {\n          backgroundColor: nftInfo.color\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Color: \", nftInfo.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [nftInfo.price, \" Tokens\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNftInfo(null),\n        className: \"btn-secondary\",\n        children: \"Clear Token Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenData, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = TokenData;\nexport default TokenData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenData\");","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/TokenData.js"],"names":["React","useState","fcl","t","TokenData","nftInfo","setNftInfo","fetchTokenData","encoded","send","script","args","Address","decoded","decode","backgroundColor","color","name","price"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,OAAO,iBAAP;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMM,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAG,MAAMN,GAAG,CACtBO,IADmB,CACd,CACJP,GAAG,CAACQ,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAdY,EAeNR,GAAG,CAACS,IAAJ,CAAS,oBAAT,EAA+BR,CAAC,CAACS,OAAjC,CAfM,CADc,CAAtB;AAmBA,UAAMC,OAAO,GAAG,MAAMX,GAAG,CAACY,MAAJ,CAAWN,OAAX,CAAtB;AACAF,IAAAA,UAAU,CAACO,OAAD,CAAV;AACD,GAtBD;;AAuBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEN,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAKIF,OAAO,iBACP;AAAA,8BACA;AAAK,QAAA,SAAS,EAAG,YAAjB;AAA8B,QAAA,KAAK,EAAE;AAACU,UAAAA,eAAe,EAAEV,OAAO,CAACW;AAA1B;AAArC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,8BAAYX,OAAO,CAACY,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAA,mBAAKZ,OAAO,CAACa,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIE;AAAQ,QAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAD,CAAjC;AAAyC,QAAA,SAAS,EAAC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAzCD;;GAAMF,S;;KAAAA,S;AA2CN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport * as fcl from \"@onflow/fcl\";\r\nimport * as t from \"@onflow/types\"\r\nimport \"./TokenData.css\"\r\nconst TokenData = () => {\r\n  const [nftInfo, setNftInfo] = useState(null)\r\n  const fetchTokenData = async () => {\r\n    const encoded = await fcl\r\n      .send([\r\n        fcl.script`\r\n        import ColorItems from address\r\n\r\n        pub fun main() : {String : String} {\r\n            let nftOwner = getAccount(address)\r\n            // log(\"NFT Owner\")   \r\n            let capability = nftOwner.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\r\n\r\n            let receiverRef = capability.borrow()\r\n                ?? panic(\"Could not borrow the receiver reference\")\r\n\r\n            return receiverRef.getMetadata(id: 1)\r\n        }\r\n      `,\r\n      fcl.args(\"0xf8d6e0586b0a20c7\", t.Address)\r\n      ])\r\n    \r\n    const decoded = await fcl.decode(encoded)\r\n    setNftInfo(decoded)\r\n  };\r\n  return (\r\n    <div className=\"token-data\">\r\n      <div className=\"center\">\r\n        <button className=\"btn-primary\" onClick={fetchTokenData}>Fetch Token Data</button>        \r\n      </div>\r\n      {\r\n        nftInfo &&\r\n        <div>\r\n        <div className = \"colorToken\" style={{backgroundColor: nftInfo.color}}></div>\r\n        <h1>Color: {nftInfo.name}</h1>\r\n        <h1>{nftInfo.price} Tokens</h1>\r\n          <button onClick={() => setNftInfo(null)} className=\"btn-secondary\">Clear Token Info</button>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TokenData;"]},"metadata":{},"sourceType":"module"}