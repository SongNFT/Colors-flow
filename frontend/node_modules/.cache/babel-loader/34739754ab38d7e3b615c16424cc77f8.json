{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eli\\\\Desktop\\\\Colors-Flow\\\\frontend\\\\src\\\\Marketplace.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport \"./Marketplace.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenData = () => {\n  _s();\n\n  const [tokensToSell, setTokensToSell] = useState([]);\n  useEffect(() => {\n    checkMarketplace();\n  }, []);\n\n  const checkMarketplace = async () => {\n    try {\n      const encoded = await fcl.send([fcl.script`\n        import MarketplaceContract from 0xProfile\n        pub fun main(): [UInt64] {\n            let account1 = getAccount(0xProfile)\n        \n            let acct1saleRef = account1.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\n                .borrow()\n                ?? panic(\"Could not borrow acct2 nft sale reference\")\n        \n            return acct1saleRef.getIDs()\n        }\n        `]);\n      const decoded = await fcl.decode(encoded);\n      let marketplaceMetadata = [];\n\n      for (const id of decoded) {\n        const encodedMetadata = await fcl.send([fcl.script`\n            import ColorItems from 0xProfile\n            pub fun main(id: Int) : {String : String} {\n              let nftOwner = getAccount(0xProfile)  \n              let capability = nftOwner.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\n          \n              let receiverRef = capability.borrow()\n                  ?? panic(\"Could not borrow the receiver reference\")\n          \n              return receiverRef.getMetadata(id: 1)\n            }\n          `, fcl.args([fcl.arg(id, t.Int)])]);\n        const decodedMetadata = await fcl.decode(encodedMetadata);\n        const encodedPrice = await fcl.send([fcl.script`\n            import MarketplaceContract from 0xProfile\n            pub fun main(id: UInt64): UFix64? {\n                let account1 = getAccount(0xProfile)\n            \n                let acct1saleRef = account1.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\n                    .borrow()\n                    ?? panic(\"Could not borrow acct nft sale reference\")\n            \n                return acct1saleRef.idPrice(tokenID: id)\n            }\n          `, fcl.args([fcl.arg(id, t.UInt64)])]);\n        const decodedPrice = await fcl.decode(encodedPrice);\n        decodedMetadata[\"price\"] = decodedPrice;\n        marketplaceMetadata.push(decodedMetadata);\n      }\n\n      setTokensToSell(marketplaceMetadata);\n    } catch (error) {\n      console.log(\"NO NFTs FOR SALE\");\n      console.log(\"ERROR: \" + error);\n    }\n  };\n\n  const buyToken = async tokenId => {\n    const txId = await fcl.send([fcl.proposer(fcl.authz), fcl.payer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.limit(50), fcl.args([fcl.arg(tokenId, t.UInt64)]), fcl.transaction`\n        import ColorItems from 0xProfile\n        import NonfungibleToken from 0xProfile\n        import MarketplaceContract from 0xProfile\n        \n        transaction {\n            let collectionRef: &AnyResource{ColorItems.NFTReceiver}\n            let temporaryVault: @NonfungibleToken.Vault\n        \n            prepare(acct: AuthAccount) {\n                self.collectionRef = acct.borrow<&AnyResource{ColorItems.NFTReceiver}>(from: /storage/NFTCollection)!\n                let vaultRef = acct.borrow<&NonfungibleToken.Vault>(from: /storage/MainVault)\n                    ?? panic(\"Could not borrow owner's vault reference\")\n        \n                self.temporaryVault <- vaultRef.withdraw(amount: 10.0)\n            }\n        \n            execute {\n                let seller = getAccount(0xProfile)\n                let saleRef = seller.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\n                    .borrow()\n                    ?? panic(\"Could not borrow seller's sale reference\")\n        \n                saleRef.purchase(tokenID: tokenId, recipient: self.collectionRef, buyTokens: <-self.temporaryVault)\n            }\n        }\n      `]);\n    const decoded = await fcl.decode(txId);\n    console.log(decoded);\n    console.log(fcl.tx(txId).onceSealed());\n    checkMarketplace();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-data\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NFT Markeplace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), tokensToSell.map(token => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listing\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: token.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Stats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Color Code: \", token.color]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [token.price, \" Pinnies\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            children: \"Buy Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this)\n      }, token.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenData, \"kp2/WVJPYjiX5RvWe9j0EQIo4y8=\");\n\n_c = TokenData;\nexport default TokenData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenData\");","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/Marketplace.js"],"names":["React","useState","useEffect","fcl","t","TokenData","tokensToSell","setTokensToSell","checkMarketplace","encoded","send","script","decoded","decode","marketplaceMetadata","id","encodedMetadata","args","arg","Int","decodedMetadata","encodedPrice","UInt64","decodedPrice","push","error","console","log","buyToken","tokenId","txId","proposer","authz","payer","authorizations","limit","transaction","tx","onceSealed","map","token","name","color","price","uri"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport * as fcl from \"@onflow/fcl\";\r\nimport * as t from \"@onflow/types\"\r\nimport \"./Marketplace.css\"\r\nconst TokenData = () => {\r\n  const [tokensToSell, setTokensToSell] = useState([])\r\n  useEffect(() => {\r\n    checkMarketplace();\r\n  }, []);\r\n\r\n  const checkMarketplace = async () => {\r\n    try {\r\n      const encoded = await fcl.send([\r\n        fcl.script`\r\n        import MarketplaceContract from 0xProfile\r\n        pub fun main(): [UInt64] {\r\n            let account1 = getAccount(0xProfile)\r\n        \r\n            let acct1saleRef = account1.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\r\n                .borrow()\r\n                ?? panic(\"Could not borrow acct2 nft sale reference\")\r\n        \r\n            return acct1saleRef.getIDs()\r\n        }\r\n        `,\r\n      ]);\r\n      const decoded = await fcl.decode(encoded);\r\n      let marketplaceMetadata = [];\r\n      for (const id of decoded) {\r\n        const encodedMetadata = await fcl.send([\r\n          fcl.script`\r\n            import ColorItems from 0xProfile\r\n            pub fun main(id: Int) : {String : String} {\r\n              let nftOwner = getAccount(0xProfile)  \r\n              let capability = nftOwner.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\r\n          \r\n              let receiverRef = capability.borrow()\r\n                  ?? panic(\"Could not borrow the receiver reference\")\r\n          \r\n              return receiverRef.getMetadata(id: 1)\r\n            }\r\n          `,\r\n          fcl.args([\r\n            fcl.arg(id, t.Int)    \r\n          ]),\r\n        ]);\r\n\r\n        const decodedMetadata = await fcl.decode(encodedMetadata);\r\n        const encodedPrice = await fcl.send([\r\n          fcl.script`\r\n            import MarketplaceContract from 0xProfile\r\n            pub fun main(id: UInt64): UFix64? {\r\n                let account1 = getAccount(0xProfile)\r\n            \r\n                let acct1saleRef = account1.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\r\n                    .borrow()\r\n                    ?? panic(\"Could not borrow acct nft sale reference\")\r\n            \r\n                return acct1saleRef.idPrice(tokenID: id)\r\n            }\r\n          `, \r\n          fcl.args([\r\n            fcl.arg(id, t.UInt64)\r\n          ])\r\n        ])\r\n        const decodedPrice = await fcl.decode(encodedPrice)\r\n        decodedMetadata[\"price\"] = decodedPrice;\r\n        marketplaceMetadata.push(decodedMetadata);\r\n      }\r\n      setTokensToSell(marketplaceMetadata);\r\n    } catch (error) {\r\n      console.log(\"NO NFTs FOR SALE\");\r\n      console.log(\"ERROR: \" + error)\r\n    }\r\n  };\r\n\r\n  const buyToken = async (tokenId) => {\r\n    const txId = await fcl\r\n    .send([\r\n      fcl.proposer(fcl.authz),\r\n      fcl.payer(fcl.authz),\r\n      fcl.authorizations([fcl.authz]),\r\n      fcl.limit(50),\r\n      fcl.args([\r\n        fcl.arg(tokenId, t.UInt64)\r\n      ]),\r\n      fcl.transaction`\r\n        import ColorItems from 0xProfile\r\n        import NonfungibleToken from 0xProfile\r\n        import MarketplaceContract from 0xProfile\r\n        \r\n        transaction {\r\n            let collectionRef: &AnyResource{ColorItems.NFTReceiver}\r\n            let temporaryVault: @NonfungibleToken.Vault\r\n        \r\n            prepare(acct: AuthAccount) {\r\n                self.collectionRef = acct.borrow<&AnyResource{ColorItems.NFTReceiver}>(from: /storage/NFTCollection)!\r\n                let vaultRef = acct.borrow<&NonfungibleToken.Vault>(from: /storage/MainVault)\r\n                    ?? panic(\"Could not borrow owner's vault reference\")\r\n        \r\n                self.temporaryVault <- vaultRef.withdraw(amount: 10.0)\r\n            }\r\n        \r\n            execute {\r\n                let seller = getAccount(0xProfile)\r\n                let saleRef = seller.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\r\n                    .borrow()\r\n                    ?? panic(\"Could not borrow seller's sale reference\")\r\n        \r\n                saleRef.purchase(tokenID: tokenId, recipient: self.collectionRef, buyTokens: <-self.temporaryVault)\r\n            }\r\n        }\r\n      `,      \r\n    ])\r\n    const decoded = await fcl.decode(txId);\r\n    console.log(decoded);\r\n    console.log(fcl.tx(txId).onceSealed());\r\n    checkMarketplace();\r\n  }\r\n  return (\r\n    <div className=\"token-data\">\r\n      <h1>NFT Markeplace</h1>\r\n      {\r\n        \r\n        tokensToSell.map(token => {\r\n          return (\r\n            <div key={token.uri} className=\"listing\">\r\n              <div>\r\n                <h3>{token.name}</h3>\r\n                <h4>Stats</h4>\r\n                <p>Color Code: {token.color}</p>\r\n                <h4>Price</h4>\r\n                <p>{token.price} Pinnies</p>\r\n                <button className=\"btn-primary\">Buy Now</button>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TokenData;"]},"metadata":{},"sourceType":"module"}