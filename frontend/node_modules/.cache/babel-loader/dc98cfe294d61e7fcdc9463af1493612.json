{"ast":null,"code":"function e() {\n  return (e = Object.assign || function (e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = arguments[r];\n\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n\n    return e;\n  }).apply(this, arguments);\n}\n\nvar r = function (e, r, t) {\n  try {\n    try {\n      return Promise.resolve(Number(e));\n    } catch (e) {\n      throw new Error(\"Decode Number Error : \" + t.join(\".\"));\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    t = function (e) {\n  return Promise.resolve(e);\n},\n    n = function (e, r, t) {\n  try {\n    return Promise.resolve(e.fields.reduce(function (e, n) {\n      try {\n        return Promise.resolve(e).then(function (o) {\n          return e = o, Promise.resolve(i(n.value, r, [].concat(t, [n.name]))).then(function (r) {\n            return e[n.name] = r, e;\n          });\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }, Promise.resolve({}))).then(function (t) {\n      var n = e.id && c(r, e.id);\n      return n ? Promise.resolve(n(t)) : t;\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    o = {\n  UInt: r,\n  Int: r,\n  UInt8: r,\n  Int8: r,\n  UInt16: r,\n  Int16: r,\n  UInt32: r,\n  Int32: r,\n  UInt64: r,\n  Int64: r,\n  UInt128: r,\n  Int128: r,\n  UInt256: r,\n  Int256: r,\n  Word8: r,\n  Word16: r,\n  Word32: r,\n  Word64: r,\n  UFix64: t,\n  Fix64: t,\n  String: t,\n  Character: t,\n  Bool: t,\n  Address: t,\n  Void: function () {\n    return Promise.resolve(null);\n  },\n  Optional: function (e, r, t) {\n    return Promise.resolve(e ? i(e, r, t) : null);\n  },\n  Reference: function (e) {\n    try {\n      return Promise.resolve({\n        address: e.address,\n        type: e.type\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  Array: function (e, r, t) {\n    try {\n      return Promise.resolve(Promise.all(e.map(function (e) {\n        return new Promise(function (n) {\n          try {\n            return Promise.resolve(i(e, r, [].concat(t, [e.type]))).then(n);\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        });\n      })));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  Dictionary: function (e, r, t) {\n    try {\n      return Promise.resolve(e.reduce(function (e, n) {\n        try {\n          return Promise.resolve(e).then(function (o) {\n            return e = o, Promise.resolve(i(n.key, r, [].concat(t, [n.key]))).then(function (o) {\n              return Promise.resolve(i(n.value, r, [].concat(t, [n.key]))).then(function (r) {\n                return e[o] = r, e;\n              });\n            });\n          });\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }, Promise.resolve({})));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  Event: n,\n  Resource: n,\n  Struct: n\n},\n    c = function (e, r) {\n  var t = Object.keys(e).find(function (e) {\n    return /^\\/.*\\/$/.test(e) ? new RegExp(e.substring(1, e.length - 1)).test(r) : e === r;\n  });\n  return r && t && e[t];\n},\n    i = function (e, r, t) {\n  try {\n    var n = c(r, e.type);\n    if (!n) throw new Error(\"Undefined Decoder Error: \" + e.type + \"@\" + t.join(\".\"));\n    return Promise.resolve(n(e.value, r, t));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    s = function (r, t, n) {\n  void 0 === t && (t = {}), void 0 === n && (n = []);\n  var c = e({}, o, {}, t);\n  return Promise.resolve(i(r, c, n));\n},\n    a = function (r, t) {\n  void 0 === t && (t = {});\n\n  try {\n    var n = !1,\n        c = e({}, o, {}, t),\n        i = r.encodedData ? (n = !0, Promise.resolve(s(r.encodedData, c))) : r.transaction ? (n = !0, Promise.resolve(Promise.all(r.transaction.events.map(function (e) {\n      try {\n        var r = e.eventIndex,\n            t = e.transactionIndex,\n            n = e.transactionId,\n            o = e.type;\n        return Promise.resolve(s(e.payload, c)).then(function (e) {\n          return {\n            type: o,\n            transactionId: n,\n            transactionIndex: t,\n            eventIndex: r,\n            data: e\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }))).then(function (t) {\n      return e({}, r.transaction, {\n        events: t\n      });\n    })) : r.events ? (n = !0, Promise.resolve(Promise.all(r.events.map(function (e) {\n      try {\n        var r = e.eventIndex,\n            t = e.transactionIndex,\n            n = e.transactionId,\n            o = e.type;\n        return Promise.resolve(s(e.payload, c)).then(function (e) {\n          return {\n            type: o,\n            transactionId: n,\n            transactionIndex: t,\n            eventIndex: r,\n            data: e\n          };\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    })))) : r.account ? (n = !0, r.account) : r.block ? (n = !0, r.block) : r.latestBlock ? (console.error(\"\\n          %c@onflow/decode Deprecation Notice\\n          ========================\\n\\n          Operating upon data of the latestBlock field of the response object is deprecated and will no longer be recognized in future releases of @onflow/decode.\\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field\\n\\n          =======================\\n        \".replace(/\\n\\s+/g, \"\\n\").trim(), \"font-weight:bold;font-family:monospace;\"), n = !0, r.latestBlock) : r.transactionId ? (n = !0, r.transactionId) : void 0;\n    return Promise.resolve(i && i.then ? i.then(function (e) {\n      return n ? e : null;\n    }) : n ? i : null);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexport { s as decode, a as decodeResponse };","map":{"version":3,"sources":["../src/decode.js"],"names":["console","error","replace","trim","decodeNumber","num","_","stack","Number","e","Error","join","decodeImplicit","i","optional","decoders","recurseDecode","v","address","type","array","Promise","all","map","res","dictionary","reduce","acc","key","value","resolve","decodeComposite","composite","decoded","fields","name","decoder","id","decoderLookup","defaultDecoders","UInt","Int","UInt8","Int8","UInt16","Int16","UInt32","Int32","UInt64","Int64","UInt128","Int128","UInt256","Int256","Word8","Word16","Word32","Word64","UFix64","Fix64","String","Character","Bool","Address","Void","Optional","Reference","Array","Dictionary","Event","Resource","Struct","lookup","found","Object","keys","find","test","RegExp","substring","length","decodeInstructions","decode","customDecoders","decodeResponse","response","encodedData","transaction","events","transactionId","transactionIndex","eventIndex","data","payload","account","block","latestBlock","_exit2"],"mappings":"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","sourcesContent":["const latestBlockDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/decode Deprecation Notice\n          ========================\n\n          Operating upon data of the latestBlock field of the response object is deprecated and will no longer be recognized in future releases of @onflow/decode.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nconst decodeNumber = async (num, _, stack) => {\n  try {\n    return Number(num)\n  } catch (e) {\n    throw new Error(`Decode Number Error : ${stack.join(\".\")}`)\n  }\n}\n\nconst decodeImplicit = async (i) => i\n\nconst decodeVoid = async () => null\n\nconst decodeOptional = async (optional, decoders, stack) =>\n  optional ? await recurseDecode(optional, decoders, stack) : null\n\nconst decodeReference = async (v) => ({address: v.address, type: v.type})\n\nconst decodeArray = async (array, decoders, stack) =>\n  await Promise.all(\n    array.map(\n      (v) =>\n        new Promise(async (res) =>\n          res(await recurseDecode(v, decoders, [...stack, v.type]))\n        )\n    )\n  )\n\nconst decodeDictionary = async (dictionary, decoders, stack) =>\n  await dictionary.reduce(async (acc, v) => {\n    acc = await acc\n    acc[\n      await recurseDecode(v.key, decoders, [...stack, v.key])\n    ] = await recurseDecode(v.value, decoders, [...stack, v.key])\n    return acc\n  }, Promise.resolve({}))\n\nconst decodeComposite = async (composite, decoders, stack) => {\n  const decoded = await composite.fields.reduce(async (acc, v) => {\n    acc = await acc\n    acc[v.name] = await recurseDecode(v.value, decoders, [...stack, v.name])\n    return acc\n  }, Promise.resolve({}))\n  const decoder = composite.id && decoderLookup(decoders, composite.id)\n  return decoder ? await decoder(decoded) : decoded\n}\n\nconst defaultDecoders = {\n  UInt: decodeNumber,\n  Int: decodeNumber,\n  UInt8: decodeNumber,\n  Int8: decodeNumber,\n  UInt16: decodeNumber,\n  Int16: decodeNumber,\n  UInt32: decodeNumber,\n  Int32: decodeNumber,\n  UInt64: decodeNumber,\n  Int64: decodeNumber,\n  UInt128: decodeNumber,\n  Int128: decodeNumber,\n  UInt256: decodeNumber,\n  Int256: decodeNumber,\n  Word8: decodeNumber,\n  Word16: decodeNumber,\n  Word32: decodeNumber,\n  Word64: decodeNumber,\n  UFix64: decodeImplicit,\n  Fix64: decodeImplicit,\n  String: decodeImplicit,\n  Character: decodeImplicit,\n  Bool: decodeImplicit,\n  Address: decodeImplicit,\n  Void: decodeVoid,\n  Optional: decodeOptional,\n  Reference: decodeReference,\n  Array: decodeArray,\n  Dictionary: decodeDictionary,\n  Event: decodeComposite,\n  Resource: decodeComposite,\n  Struct: decodeComposite,\n}\n\nconst decoderLookup = (decoders, lookup) => {\n  const found = Object.keys(decoders).find((decoder) => {\n    if (/^\\/.*\\/$/.test(decoder)) {\n      const reg = new RegExp(decoder.substring(1, decoder.length - 1))\n      return reg.test(lookup)\n    }\n    return decoder === lookup\n  })\n  return lookup && found && decoders[found]\n}\n\nconst recurseDecode = async (decodeInstructions, decoders, stack) => {\n  let decoder = decoderLookup(decoders, decodeInstructions.type)\n  if (!decoder)\n    throw new Error(\n      `Undefined Decoder Error: ${decodeInstructions.type}@${stack.join(\".\")}`\n    )\n  return await decoder(decodeInstructions.value, decoders, stack)\n}\n\nexport const decode = async (\n  decodeInstructions,\n  customDecoders = {},\n  stack = []\n) => {\n  let decoders = {...defaultDecoders, ...customDecoders}\n  return await recurseDecode(decodeInstructions, decoders, stack)\n}\n\nexport const decodeResponse = async (response, customDecoders = {}) => {\n  let decoders = {...defaultDecoders, ...customDecoders}\n\n  if (response.encodedData) {\n    return await decode(response.encodedData, decoders)\n  } else if (response.transaction) {\n    return {\n      ...response.transaction,\n      events: await Promise.all(\n        response.transaction.events.map(async function decodeEvents(e) {\n          return {\n            type: e.type,\n            transactionId: e.transactionId,\n            transactionIndex: e.transactionIndex,\n            eventIndex: e.eventIndex,\n            data: await decode(e.payload, decoders),\n          }\n        })\n      ),\n    }\n  } else if (response.events) {\n    return await Promise.all(\n      response.events.map(async function decodeEvents(e) {\n        return {\n          type: e.type,\n          transactionId: e.transactionId,\n          transactionIndex: e.transactionIndex,\n          eventIndex: e.eventIndex,\n          data: await decode(e.payload, decoders),\n        }\n      })\n    )\n  } else if (response.account) {\n    return response.account\n  } else if (response.block) {\n    return response.block\n  } else if (response.latestBlock) {\n    latestBlockDeprecationNotice()\n    return response.latestBlock\n  } else if (response.transactionId) {\n    return response.transactionId\n  }\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}