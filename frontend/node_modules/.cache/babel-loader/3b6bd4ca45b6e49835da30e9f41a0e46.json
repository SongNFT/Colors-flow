{"ast":null,"code":"var _s = $RefreshSig$();\n\n// File: ./src/hooks/profile.js\nimport { atomFamily, useRecoilState } from \"recoil\";\nimport { fetchProfile } from \"../flow/fetch-profile.script\";\nimport { setName as profileSetName } from \"../flow/profile-set-name.tx\";\nimport { useCurrentUser } from \"./current-user\";\nconst DEFAULT = {\n  name: \"Flow Test User\",\n  color: \"#0000FF\",\n  info: \"This is a hardcoded basic user\",\n  avatar: \"https://avatars.onflow.org/avatar/pew\"\n};\nconst IDLE = \"IDLE\";\nconst PROCESSING = \"PROCESSING\";\nconst $profile = atomFamily({\n  key: \"PROFILE::STATE\",\n  default: DEFAULT\n});\nconst $status = atomFamily({\n  key: \"PROFILE::STATUS\",\n  default: PROCESSING\n});\nexport function useProfile(address) {\n  _s();\n\n  const cu = useCurrentUser();\n  const [profile, setProfile] = useRecoilState($profile(address));\n  const [status, setStatus] = useRecoilState($status(address));\n\n  async function refetch() {\n    setStatus(PROCESSING);\n    await fetchProfile(address).then(profile => {\n      if (profile == null) return profile;\n      if (profile.avatar === \"\") profile.avatar = DEFAULT.avatar;\n      if (profile.info === \"\") profile.info = DEFAULT.info;\n      return profile;\n    }).then(setProfile);\n    setStatus(IDLE);\n  }\n\n  async function setName(name) {\n    setStatus(PROCESSING);\n    await profileSetName(name);\n    setStatus(IDLE);\n    await refetch();\n  }\n\n  return { ...(profile !== null && profile !== void 0 ? profile : DEFAULT),\n    status,\n    isCurrentUser: address === cu.addr,\n    setName,\n    refetch,\n    IDLE,\n    PROCESSING,\n    isIdle: status === IDLE,\n    isProcessing: status === PROCESSING\n  };\n}\n\n_s(useProfile, \"AiegL6TFD68PmlWZYMC48vVL1Vo=\", false, function () {\n  return [useCurrentUser, useRecoilState, useRecoilState];\n});","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/hooks/profile.js"],"names":["atomFamily","useRecoilState","fetchProfile","setName","profileSetName","useCurrentUser","DEFAULT","name","color","info","avatar","IDLE","PROCESSING","$profile","key","default","$status","useProfile","address","cu","profile","setProfile","status","setStatus","refetch","then","isCurrentUser","addr","isIdle","isProcessing"],"mappings":";;AAAA;AAEA,SAAQA,UAAR,EAAoBC,cAApB,QAAyC,QAAzC;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,OAAO,IAAIC,cAAnB,QAAwC,6BAAxC;AACA,SAAQC,cAAR,QAA6B,gBAA7B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,gBADQ;AAEdC,EAAAA,KAAK,EAAE,SAFO;AAGdC,EAAAA,IAAI,EAAE,gCAHQ;AAIdC,EAAAA,MAAM,EAAE;AAJM,CAAhB;AAMA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA,MAAMC,QAAQ,GAAGb,UAAU,CAAC;AAC1Bc,EAAAA,GAAG,EAAE,gBADqB;AAE1BC,EAAAA,OAAO,EAAET;AAFiB,CAAD,CAA3B;AAKA,MAAMU,OAAO,GAAGhB,UAAU,CAAC;AACzBc,EAAAA,GAAG,EAAE,iBADoB;AAEzBC,EAAAA,OAAO,EAAEH;AAFgB,CAAD,CAA1B;AAKA,OAAO,SAASK,UAAT,CAAoBC,OAApB,EAA6B;AAAA;;AAClC,QAAMC,EAAE,GAAGd,cAAc,EAAzB;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBpB,cAAc,CAACY,QAAQ,CAACK,OAAD,CAAT,CAA5C;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBtB,cAAc,CAACe,OAAO,CAACE,OAAD,CAAR,CAA1C;;AAEA,iBAAeM,OAAf,GAAyB;AACvBD,IAAAA,SAAS,CAACX,UAAD,CAAT;AACA,UAAMV,YAAY,CAACgB,OAAD,CAAZ,CACHO,IADG,CACEL,OAAO,IAAI;AACf,UAAIA,OAAO,IAAI,IAAf,EAAqB,OAAOA,OAAP;AACrB,UAAIA,OAAO,CAACV,MAAR,KAAmB,EAAvB,EAA2BU,OAAO,CAACV,MAAR,GAAiBJ,OAAO,CAACI,MAAzB;AAC3B,UAAIU,OAAO,CAACX,IAAR,KAAiB,EAArB,EAAyBW,OAAO,CAACX,IAAR,GAAeH,OAAO,CAACG,IAAvB;AACzB,aAAOW,OAAP;AACD,KANG,EAOHK,IAPG,CAOEJ,UAPF,CAAN;AAQAE,IAAAA,SAAS,CAACZ,IAAD,CAAT;AACD;;AAED,iBAAeR,OAAf,CAAuBI,IAAvB,EAA6B;AAC3BgB,IAAAA,SAAS,CAACX,UAAD,CAAT;AACA,UAAMR,cAAc,CAACG,IAAD,CAApB;AACAgB,IAAAA,SAAS,CAACZ,IAAD,CAAT;AACA,UAAMa,OAAO,EAAb;AACD;;AAED,SAAO,EACL,IAAIJ,OAAJ,aAAIA,OAAJ,cAAIA,OAAJ,GAAed,OAAf,CADK;AAELgB,IAAAA,MAFK;AAGLI,IAAAA,aAAa,EAAER,OAAO,KAAKC,EAAE,CAACQ,IAHzB;AAILxB,IAAAA,OAJK;AAKLqB,IAAAA,OALK;AAMLb,IAAAA,IANK;AAOLC,IAAAA,UAPK;AAQLgB,IAAAA,MAAM,EAAEN,MAAM,KAAKX,IARd;AASLkB,IAAAA,YAAY,EAAEP,MAAM,KAAKV;AATpB,GAAP;AAWD;;GApCeK,U;UACHZ,c,EACmBJ,c,EACFA,c","sourcesContent":["// File: ./src/hooks/profile.js\r\n\r\nimport {atomFamily, useRecoilState} from \"recoil\"\r\nimport {fetchProfile} from \"../flow/fetch-profile.script\"\r\nimport {setName as profileSetName} from \"../flow/profile-set-name.tx\"\r\nimport {useCurrentUser} from \"./current-user\"\r\n\r\nconst DEFAULT = {\r\n  name: \"Flow Test User\",\r\n  color: \"#0000FF\",\r\n  info: \"This is a hardcoded basic user\",\r\n  avatar: \"https://avatars.onflow.org/avatar/pew\",\r\n}\r\nconst IDLE = \"IDLE\"\r\nconst PROCESSING = \"PROCESSING\"\r\n\r\nconst $profile = atomFamily({\r\n  key: \"PROFILE::STATE\",\r\n  default: DEFAULT,\r\n})\r\n\r\nconst $status = atomFamily({\r\n  key: \"PROFILE::STATUS\",\r\n  default: PROCESSING,\r\n})\r\n\r\nexport function useProfile(address) {\r\n  const cu = useCurrentUser()\r\n  const [profile, setProfile] = useRecoilState($profile(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  async function refetch() {\r\n    setStatus(PROCESSING)\r\n    await fetchProfile(address)\r\n      .then(profile => {\r\n        if (profile == null) return profile\r\n        if (profile.avatar === \"\") profile.avatar = DEFAULT.avatar\r\n        if (profile.info === \"\") profile.info = DEFAULT.info\r\n        return profile\r\n      })\r\n      .then(setProfile)\r\n    setStatus(IDLE)\r\n  }\r\n\r\n  async function setName(name) {\r\n    setStatus(PROCESSING)\r\n    await profileSetName(name)\r\n    setStatus(IDLE)\r\n    await refetch()\r\n  }\r\n\r\n  return {\r\n    ...(profile ?? DEFAULT),\r\n    status,\r\n    isCurrentUser: address === cu.addr,\r\n    setName,\r\n    refetch,\r\n    IDLE,\r\n    PROCESSING,\r\n    isIdle: status === IDLE,\r\n    isProcessing: status === PROCESSING,\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}