{"ast":null,"code":"import { pipe as r, makeAuthorizer as n } from \"@onflow/interaction\";\n\nfunction o() {\n  return (o = Object.assign || function (r) {\n    for (var n = 1; n < arguments.length; n++) {\n      var o = arguments[n];\n\n      for (var t in o) Object.prototype.hasOwnProperty.call(o, t) && (r[t] = o[t]);\n    }\n\n    return r;\n  }).apply(this, arguments);\n}\n\nvar t = {\n  authorizer: !0\n};\n\nfunction e(e) {\n  return void 0 === e && (e = []), r(e.map(function (r) {\n    return n(\"function\" == typeof r ? {\n      resolve: r,\n      role: t,\n      roles: t\n    } : o({}, r, {\n      role: t,\n      roles: t\n    }));\n  }));\n}\n\nfunction i(r, n, o, t) {\n  return {\n    addr: r,\n    signingFunction: n,\n    keyId: o,\n    sequenceNum: t\n  };\n}\n\nexport { i as authorization, e as authorizations };","map":{"version":3,"sources":["../src/index.js"],"names":["roles","authorizer","authorizations","ax","pipe","map","authz","makeAuthorizer","resolve","role","authorization","addr","signingFunction","keyId","sequenceNum"],"mappings":";;;;;;;;;;;;AAEA;;AAAA,IAAMA,CAAAA,GAAQ;AACZC,EAAAA,UAAAA,EAAAA,CAAY;AADA,CAAd;;AACc,SAGEC,CAHF,CAGiBC,CAHjB,EAGiBA;AAC7B,SAAA,KAAA,CAAA,KAD6BA,CAC7B,KAD6BA,CAAAA,GAAK,EAClC,GAAOC,CAAAA,CACLD,CAAAA,CAAGE,GAAHF,CAAO,UAACG,CAAD,EAACA;AACN,WACIC,CAAAA,CADoB,cAAA,OAAVD,CAAU,GACL;AAACE,MAAAA,OAAAA,EAASF,CAAV;AAAiBG,MAAAA,IAAAA,EAAMT,CAAvB;AAA8BA,MAAAA,KAAAA,EAAAA;AAA9B,KADK,GACyBA,CAAAA,CAAAA,EAAAA,EAC1BM,CAD0BN,EAC1BM;AAAOG,MAAAA,IAAAA,EAAMT,CAAbM;AAAoBN,MAAAA,KAAAA,EAAAA;AAApBM,KAD0BN,CAA7CO,CADJ;AAE2CP,GAH7CG,CADKC,CAAP;AAI+CJ;;AAAAA,SAKjCU,CALiCV,CAKnBW,CALmBX,EAKbY,CALaZ,EAKIa,CALJb,EAKWc,CALXd,EAKWc;AAC1D,SAAO;AAACH,IAAAA,IAAAA,EAAAA,CAAD;AAAOC,IAAAA,eAAAA,EAAAA,CAAP;AAAwBC,IAAAA,KAAAA,EAAAA,CAAxB;AAA+BC,IAAAA,WAAAA,EAAAA;AAA/B,GAAP;AAAsCA;;AAAAA,SAAAA,CAAAA,IAAAA,aAAAA,EAAAA,CAAAA,IAAAA,cAAAA","sourcesContent":["import {pipe, makeAuthorizer} from \"@onflow/interaction\"\n\nconst roles = {\n  authorizer: true,\n}\n\nexport function authorizations(ax = []) {\n  return pipe(\n    ax.map((authz) => {\n      return typeof authz === \"function\"\n        ? makeAuthorizer({resolve: authz, role: roles, roles})\n        : makeAuthorizer({...authz, role: roles, roles})\n    })\n  )\n}\n\nexport function authorization(addr, signingFunction, keyId, sequenceNum) {\n  return {addr, signingFunction, keyId, sequenceNum}\n}\n"]},"metadata":{},"sourceType":"module"}