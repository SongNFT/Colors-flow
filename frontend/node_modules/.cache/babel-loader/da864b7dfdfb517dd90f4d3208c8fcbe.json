{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eli\\\\Desktop\\\\Colors-Flow\\\\frontend\\\\src\\\\MintColor.js\";\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport \"./TokenData.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MintColor = () => {\n  const MintColorToken = async () => {\n    const encoded = await fcl.send([fcl.script`\n        import ColorItems from 0xd929bd6c5ce17fe1\n        transaction {\n            let receiverRef: &{ColorItems.NFTReceiver}\n            let minterRef: &ColorItems.NFTMinter\n\n            prepare(acct: AuthAccount) {\n                self.receiverRef = acct.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow receiver reference\")        \n                \n                self.minterRef = acct.borrow<&ColorItems.NFTMinter>(from: /storage/NFTMinter)\n                    ?? panic(\"could not borrow minter reference\")\n        }\n        execute {\n            let metadata : {String : String} = {\n                \"color\": \"#90323d\",\n                \"name\": \"red violet color wheel\",\n                \"price\": \"40\"\n            }\n            let newNFT <- self.minterRef.mintNFT()\n        \n            self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n\n            log(\"NFT Minted and deposited to Account 2's Collection\")\n            \n            }\n        }\n      `]);\n    const decoded = await fcl.decode(encoded);\n    console.log(\"Return: \" + decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: MintColorToken,\n      className: \"btn-secondary\",\n      children: \"Mint Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MintColor;\nexport default MintColor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintColor\");","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/MintColor.js"],"names":["React","useState","fcl","MintColor","MintColorToken","encoded","send","script","decoded","decode","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,iBAAP;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAEtB,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAG,MAAMH,GAAG,CACtBI,IADmB,CACd,CACJJ,GAAG,CAACK,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA7BY,CADc,CAAtB;AAiCA,UAAMC,OAAO,GAAG,MAAMN,GAAG,CAACO,MAAJ,CAAWJ,OAAX,CAAtB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaH,OAAzB;AACD,GApCD;;AAqCA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACK;AAAQ,MAAA,OAAO,EAAEJ,cAAjB;AAAiC,MAAA,SAAS,EAAC,eAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5CD;;KAAMD,S;AA8CN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport * as fcl from \"@onflow/fcl\";\r\nimport \"./TokenData.css\"\r\nconst MintColor = () => {\r\n  \r\n  const MintColorToken = async () => {\r\n    const encoded = await fcl\r\n      .send([\r\n        fcl.script`\r\n        import ColorItems from 0xd929bd6c5ce17fe1\r\n        transaction {\r\n            let receiverRef: &{ColorItems.NFTReceiver}\r\n            let minterRef: &ColorItems.NFTMinter\r\n\r\n            prepare(acct: AuthAccount) {\r\n                self.receiverRef = acct.getCapability<&{ColorItems.NFTReceiver}>(/public/NFTReceiver)\r\n                    .borrow()\r\n                    ?? panic(\"Could not borrow receiver reference\")        \r\n                \r\n                self.minterRef = acct.borrow<&ColorItems.NFTMinter>(from: /storage/NFTMinter)\r\n                    ?? panic(\"could not borrow minter reference\")\r\n        }\r\n        execute {\r\n            let metadata : {String : String} = {\r\n                \"color\": \"#90323d\",\r\n                \"name\": \"red violet color wheel\",\r\n                \"price\": \"40\"\r\n            }\r\n            let newNFT <- self.minterRef.mintNFT()\r\n        \r\n            self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\r\n\r\n            log(\"NFT Minted and deposited to Account 2's Collection\")\r\n            \r\n            }\r\n        }\r\n      `\r\n      ])\r\n    \r\n    const decoded = await fcl.decode(encoded)\r\n    console.log(\"Return: \" + decoded)\r\n  };\r\n  return (\r\n    <div className=\"mint\">\r\n         <button onClick={MintColorToken} className=\"btn-secondary\">Mint Token</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MintColor;"]},"metadata":{},"sourceType":"module"}