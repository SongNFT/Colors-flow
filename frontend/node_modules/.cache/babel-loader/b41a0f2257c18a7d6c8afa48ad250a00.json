{"ast":null,"code":"function n(t, o, r) {\n  if (void 0 === t && (t = []), void 0 === o && (o = []), void 0 === r && (r = []), !t.length && !o.length) return r;\n  if (!t.length) return r;\n  if (!o.length) return [].concat(r, [t[0]]);\n  var e = t[0],\n      i = t.slice(1),\n      a = o[0],\n      u = o.slice(1);\n  return void 0 !== e && r.push(e), void 0 !== a && r.push(a), n(i, u, r);\n}\n\nfunction t(n) {\n  return function (o) {\n    return \"function\" == typeof o ? (console.warn(\"\\n        %cFCL/SDK Deprecation Notice\\n        ============================\\n\\n        Interopolation of functions into template literals will not be a thing in future versions of the Flow-JS-SDK or FCL.\\n        You can learn more (including a guide on common transition paths) here: https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\\n\\n        ============================\\n      \", \"font-weight:bold;font-family:monospace;\"), t(n)(o(n))) : String(o);\n  };\n}\n\nfunction o(o) {\n  for (var r = arguments.length, e = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) e[i - 1] = arguments[i];\n\n  return \"string\" == typeof o ? function () {\n    return o;\n  } : Array.isArray(o) ? function (r) {\n    return n(o, e.map(t(r))).join(\"\").trim();\n  } : o;\n}\n\nexport { n as interleave, o as template };","map":{"version":3,"sources":["../src/template.js"],"names":["interleave","a","b","c","length","aHead","aRest","bHead","bRest","undefined","push","recApply","d","arg1","console","warn","String","template","head","rest","Array","isArray","map","join","trim"],"mappings":"SAAgBA,C,CAAWC,C,EAAQC,C,EAAQC,C,EAAAA;AACzC,MAAA,KAAA,CAAA,KADyBF,CACzB,KADyBA,CAAAA,GAAI,EAC7B,GAD6B,KAAA,CAAA,KAAIC,CAAJ,KAAIA,CAAAA,GAAI,EAAR,CAC7B,EADqC,KAAA,CAAA,KAAIC,CAAJ,KAAIA,CAAAA,GAAI,EAAR,CACrC,EAD6C,CACxCF,CAAAA,CAAEG,MADsC,IACtCA,CAAWF,CAAAA,CAAEE,MAApB,EAA4B,OAAOD,CAAP;AAC5B,MAAA,CAAKF,CAAAA,CAAEG,MAAP,EAAe,OAAOD,CAAP;AACf,MAAA,CAAKD,CAAAA,CAAEE,MAAP,EAAe,OAAA,GAAA,MAAA,CAAWD,CAAX,EAAWA,CAAGF,CAAAA,CAAE,CAAFA,CAAHE,CAAX,CAAA;AAHkC,MAK1CE,CAAAA,GAAmBJ,CAAAA,CAAAA,CAAAA,CALuB;AAAA,MAKhCK,CAAAA,GAASL,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CALuB;AAAA,MAM1CM,CAAAA,GAAmBL,CAAAA,CAAAA,CAAAA,CANuB;AAAA,MAMhCM,CAAAA,GAASN,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CANuB;AAWjD,SAAA,KAHcO,CAGd,KAHIJ,CAGJ,IAHyBF,CAAAA,CAAEO,IAAFP,CAAOE,CAAPF,CAGzB,EAHgCE,KAClBI,CADkBJ,KAC5BE,CAD4BF,IACPF,CAAAA,CAAEO,IAAFP,CAAOI,CAAPJ,CAEzB,EAAOH,CAAAA,CAAWM,CAAXN,EAAkBQ,CAAlBR,EAAyBG,CAAzBH,CAAP;AAGF;;AAAA,SAASW,CAAT,CAAkBC,CAAlB,EAAkBA;AAChB,SAAA,UAAgBC,CAAhB,EAAgBA;AACd,WAAoB,cAAA,OAATA,CAAS,IAClBC,OAAAA,CAAQC,IAARD,CAAQC,mbAARD,EAUE,yCAVFA,GAYOH,CAAAA,CAAAA,CAAAA,CAAAA,CAAYE,CAAAA,CAAKD,CAALC,CAAZF,CAbW,IAebK,MAAAA,CAAOH,CAAPG,CAfP;AAecH,GAhBhB;AAgBgBA;;AAAAA,SAIFI,CAJEJ,CAIOK,CAJPL,EAIOK;AAAAA,OAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAASC,CAAAA,GAAAA,IAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAATD,EAASC,CAAAA,GAAAA,CAATD,EAASC,CAAAA,GAAAA,CAATD,EAASC,CAAAA,EAATD,EAASC,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA;;AAChC,SAAoB,YAAA,OAATD,CAAS,GAATA,YAAAA;AAAAA,WAAgCA,CAAhCA;AAAgCA,GAAvB,GAChBE,KAAAA,CAAMC,OAAND,CAAcF,CAAdE,IAAcF,UACTN,CADSM,EACTN;AAAAA,WACLZ,CAAAA,CAAWkB,CAAXlB,EAAiBmB,CAAAA,CAAKG,GAALH,CAASR,CAAAA,CAASC,CAATD,CAATQ,CAAjBnB,CAAAA,CACGuB,IADHvB,CACQ,EADRA,EAEGwB,IAFHxB,EADKY;AAGFY,GAJHJ,GAMGF,CAPP;AAOOA;;AAAAA,SAAAA,CAAAA,IAAAA,UAAAA,EAAAA,CAAAA,IAAAA,QAAAA","sourcesContent":["export function interleave(a = [], b = [], c = []) {\n  if (!a.length && !b.length) return c\n  if (!a.length) return c\n  if (!b.length) return [...c, a[0]]\n\n  const [aHead, ...aRest] = a\n  const [bHead, ...bRest] = b\n\n  if (aHead !== undefined) c.push(aHead)\n  if (bHead !== undefined) c.push(bHead)\n\n  return interleave(aRest, bRest, c)\n}\n\nfunction recApply(d) {\n  return function(arg1) {\n    if (typeof arg1 === \"function\") {\n      console.warn(\n        `\n        %cFCL/SDK Deprecation Notice\n        ============================\n\n        Interopolation of functions into template literals will not be a thing in future versions of the Flow-JS-SDK or FCL.\n        You can learn more (including a guide on common transition paths) here: https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\n\n        ============================\n      `,\n        \"font-weight:bold;font-family:monospace;\"\n      )\n      return recApply(d)(arg1(d))\n    }\n    return String(arg1)\n  }\n}\n\nexport function template(head, ...rest) {\n  if (typeof head === \"string\") return () => head\n  if (Array.isArray(head)) {\n    return d =>\n      interleave(head, rest.map(recApply(d)))\n        .join(\"\")\n        .trim()\n  }\n  return head\n}\n"]},"metadata":{},"sourceType":"module"}