{"ast":null,"code":"import { isTransaction as r, isScript as e, Ok as n } from \"@onflow/interaction\";\n\nfunction t(r) {\n  if (null == typeof r.xform) throw new Error(\"No type specified for argument: \" + r.value);\n  if (\"function\" == typeof r.xform) return r.xform(r.value);\n  if (\"function\" == typeof r.xform.asArgument) return r.xform.asArgument(r.value);\n  throw console.error(\"Invalid Argument\", r), new Error(\"Invalid Argument\");\n}\n\nvar o = function (o) {\n  try {\n    if (function (n) {\n      return !(r(n) || e(n));\n    }(o)) return Promise.resolve(n(o));\n\n    for (var u = 0, f = Object.entries(o.arguments); u < f.length; u++) {\n      var i = f[u];\n      o.arguments[i[0]].asArgument = t(i[1]);\n    }\n\n    return Promise.resolve(n(o));\n  } catch (r) {\n    return Promise.reject(r);\n  }\n};\n\nexport { o as resolveArguments };","map":{"version":3,"sources":["../src/index.js"],"names":["ix","isTransaction","isScript","cast","arg","xform","Error","value","asArgument","console","error","resolveArguments","ignore","Ok","Object","entries","arguments"],"mappings":";;AAMA,SAASG,CAAT,CAAeC,CAAf,EAAeA;AACb,MAAwB,QAAA,OAAbA,CAAAA,CAAIC,KAAf,EAA8B,MAAA,IAAUC,KAAV,CAAUA,qCAAyCF,CAAAA,CAAIG,KAAvD,CAAA;AAC9B,MAAyB,cAAA,OAAdH,CAAAA,CAAIC,KAAf,EAAqC,OAAOD,CAAAA,CAAIC,KAAJD,CAAUA,CAAAA,CAAIG,KAAdH,CAAP;AACrC,MAAoC,cAAA,OAAzBA,CAAAA,CAAIC,KAAJD,CAAUI,UAArB,EAAgD,OAAOJ,CAAAA,CAAIC,KAAJD,CAAUI,UAAVJ,CAAqBA,CAAAA,CAAIG,KAAzBH,CAAP;AAEhD,QADAK,OAAAA,CAAQC,KAARD,CAAc,kBAAdA,EAAkCL,CAAlCK,GAAkCL,IACxBE,KADwBF,CACxBE,kBADwBF,CAClC;AAGoBO;;AAAAA,IAAAA,CAAAA,GAAAA,UAAkBX,CAAlBW,EAAkBX;AAAAA,MAAAA;AACtC,QAbF,UAAgBA,CAAhB,EAAgBA;AACd,aAAA,EAASC,CAAAA,CAAcD,CAAdC,CAAAA,IAAqBC,CAAAA,CAASF,CAATE,CAA9B,CAAA;AAYIU,KAbN,CAaaZ,CAbb,CAaE,EAAgB,OAAA,OAAA,CAAA,OAAA,CAAOa,CAAAA,CAAGb,CAAHa,CAAP,CAAA;;AAEhB,SAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAsBC,MAAAA,CAAOC,OAAPD,CAAed,CAAAA,CAAGgB,SAAlBF,CAAtB,EAAwCE,CAAAA,GAAAA,CAAAA,CAAAA,MAAxC,EAAwCA,CAAAA,EAAxC,EAAoD;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAClDhB,MAAAA,CAAAA,CAAGgB,SAAHhB,CAAGgB,CAAAA,CAAAA,CAAAA,CAAHhB,EAAiBQ,UAAjBR,GAA8BG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA9BH;AAGF;;AAAA,WAAA,OAAA,CAAA,OAAA,CAAOa,CAAAA,CAAGb,CAAHa,CAAP,CAAA;AAPF,GAAwCb,CAAxC,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAAsBW;;AAAtB,SAAA,CAAA,IAAA,gBAAA","sourcesContent":["import {isTransaction, isScript, Ok, Bad} from \"@onflow/interaction\"\n\nfunction ignore(ix) {\n  return !(isTransaction(ix) || isScript(ix))\n}\n\nfunction cast (arg) {\n  if (typeof arg.xform == null) throw new Error(`No type specified for argument: ${arg.value}`)\n  if (typeof arg.xform === \"function\") return arg.xform(arg.value)\n  if (typeof arg.xform.asArgument === \"function\") return arg.xform.asArgument(arg.value)\n  console.error(\"Invalid Argument\", arg)\n  throw new Error(`Invalid Argument`)\n}\n\nexport async function resolveArguments (ix) {\n  if (ignore(ix)) return Ok(ix)\n\n  for (let [id, arg] of Object.entries(ix.arguments)) {\n    ix.arguments[id].asArgument = cast(arg)\n  }\n\n  return Ok(ix)\n}\n"]},"metadata":{},"sourceType":"module"}