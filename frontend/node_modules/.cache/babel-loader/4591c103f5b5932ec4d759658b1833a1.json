{"ast":null,"code":"// File: ./src/flow/init-account.tx.js\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nexport async function initAccount() {\n  const txId = await fcl.send([// Transactions use fcl.transaction instead of fcl.script\n  // Their syntax is a little different too\n  fcl.transaction`\n        import Profile from 0xProfile\n\n        transaction {\n          // We want the account's address for later so we can verify if the account was initialized properly\n          let address: Address\n\n          prepare(account: AuthAccount) {\n            // save the address for the post check\n            self.address = account.address\n\n            // Only initialize the account if it hasn't already been initialized\n            if (!Profile.check(self.address)) {\n              // This creates and stores the profile in the user's account\n              account.save(<- Profile.new(), to: Profile.privatePath)\n\n              // This creates the public capability that lets applications read the profile's info\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\n            }\n          }\n\n          // verify that the account has been initialized\n          post {\n            Profile.check(self.address): \"Account was not initialized\"\n          }\n        }\n      `, fcl.payer(fcl.authz), // current user is responsible for paying for the transaction\n  fcl.proposer(fcl.authz), // current user acting as the nonce\n  fcl.authorizations([fcl.authz]), // current user will be first AuthAccount\n  fcl.limit(35) // set the compute limits\n  ]).then(fcl.decode);\n  return fcl.tx(txId).onceSealed();\n}","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/flow/init-account.tx.js"],"names":["fcl","t","initAccount","txId","send","transaction","payer","authz","proposer","authorizations","limit","then","decode","tx","onceSealed"],"mappings":"AAAA;AAEA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AAEA,OAAO,eAAeC,WAAf,GAA6B;AAClC,QAAMC,IAAI,GAAG,MAAMH,GAAG,CACnBI,IADgB,CACX,CACJ;AACA;AACAJ,EAAAA,GAAG,CAACK,WAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA7BU,EA8BJL,GAAG,CAACM,KAAJ,CAAUN,GAAG,CAACO,KAAd,CA9BI,EA8BkB;AACtBP,EAAAA,GAAG,CAACQ,QAAJ,CAAaR,GAAG,CAACO,KAAjB,CA/BI,EA+BqB;AACzBP,EAAAA,GAAG,CAACS,cAAJ,CAAmB,CAACT,GAAG,CAACO,KAAL,CAAnB,CAhCI,EAgC6B;AACjCP,EAAAA,GAAG,CAACU,KAAJ,CAAU,EAAV,CAjCI,CAiCW;AAjCX,GADW,EAoChBC,IApCgB,CAoCXX,GAAG,CAACY,MApCO,CAAnB;AAsCA,SAAOZ,GAAG,CAACa,EAAJ,CAAOV,IAAP,EAAaW,UAAb,EAAP;AACD","sourcesContent":["// File: ./src/flow/init-account.tx.js\r\n\r\nimport * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\n\r\nexport async function initAccount() {\r\n  const txId = await fcl\r\n    .send([\r\n      // Transactions use fcl.transaction instead of fcl.script\r\n      // Their syntax is a little different too\r\n      fcl.transaction`\r\n        import Profile from 0xProfile\r\n\r\n        transaction {\r\n          // We want the account's address for later so we can verify if the account was initialized properly\r\n          let address: Address\r\n\r\n          prepare(account: AuthAccount) {\r\n            // save the address for the post check\r\n            self.address = account.address\r\n\r\n            // Only initialize the account if it hasn't already been initialized\r\n            if (!Profile.check(self.address)) {\r\n              // This creates and stores the profile in the user's account\r\n              account.save(<- Profile.new(), to: Profile.privatePath)\r\n\r\n              // This creates the public capability that lets applications read the profile's info\r\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\r\n            }\r\n          }\r\n\r\n          // verify that the account has been initialized\r\n          post {\r\n            Profile.check(self.address): \"Account was not initialized\"\r\n          }\r\n        }\r\n      `,\r\n      fcl.payer(fcl.authz), // current user is responsible for paying for the transaction\r\n      fcl.proposer(fcl.authz), // current user acting as the nonce\r\n      fcl.authorizations([fcl.authz]), // current user will be first AuthAccount\r\n      fcl.limit(35), // set the compute limits\r\n    ])\r\n    .then(fcl.decode)\r\n\r\n  return fcl.tx(txId).onceSealed()\r\n}"]},"metadata":{},"sourceType":"module"}