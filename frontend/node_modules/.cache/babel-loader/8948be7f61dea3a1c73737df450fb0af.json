{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// File: ./src/hooks/current-user.js\nimport { useEffect } from \"react\";\nimport { atom, useSetRecoilState, useRecoilValue } from \"recoil\";\nimport * as fcl from \"@onflow/fcl\"; // This is a Recoil atom (https://recoiljs.org/docs/api-reference/core/atom)\n// You can think of it as a unique reactive node with our current users state.\n// Our hook is going to subscribe to this state.\n\nexport const $currentUser = atom({\n  key: \"CURRENT_USER\",\n  // Atoms needs a unique key, we can only ever call the atom function once with this key.\n  default: {\n    addr: null,\n    cid: null,\n    loggedIn: null\n  }\n}); // We only want a single place where we subscribe and update our\n// current user's atom state. That will be this component that we will\n// add to the root of our application.\n\nexport function CurrentUserSubscription() {\n  _s();\n\n  const setCurrentUser = useSetRecoilState($currentUser);\n  useEffect(() => fcl.currentUser().subscribe(setCurrentUser), [setCurrentUser]);\n  return null;\n} // Our actual hook, most of the work is happening\n// in our CurrentUserSubscription component so that allows\n// this hook to focus on decorating the current user value\n// we receive with some helper functions\n\n_s(CurrentUserSubscription, \"5QjGS8dt4/kSbj58kAX3AJ7sK8s=\", false, function () {\n  return [useSetRecoilState];\n});\n\n_c = CurrentUserSubscription;\nexport function useCurrentUser() {\n  _s2();\n\n  const currentUser = useRecoilValue($currentUser);\n  return { ...currentUser,\n    logOut: fcl.unauthenticate,\n    logIn: fcl.logIn,\n    signUp: fcl.signUp\n  };\n}\n\n_s2(useCurrentUser, \"8bjdkQAWGjVTjKE7tT0xk1Lm0Wg=\", false, function () {\n  return [useRecoilValue];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentUserSubscription\");","map":{"version":3,"sources":["C:/Users/Eli/Desktop/Colors-Flow/frontend/src/hooks/current-user.js"],"names":["useEffect","atom","useSetRecoilState","useRecoilValue","fcl","$currentUser","key","default","addr","cid","loggedIn","CurrentUserSubscription","setCurrentUser","currentUser","subscribe","useCurrentUser","logOut","unauthenticate","logIn","signUp"],"mappings":";;;AAAA;AAEA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,cAAjC,QAAsD,QAAtD;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAGJ,IAAI,CAAC;AAC/BK,EAAAA,GAAG,EAAE,cAD0B;AACV;AACrBC,EAAAA,OAAO,EAAE;AAACC,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,GAAG,EAAE,IAAlB;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC;AAFsB,CAAD,CAAzB,C,CAKP;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,GAAmC;AAAA;;AACxC,QAAMC,cAAc,GAAGV,iBAAiB,CAACG,YAAD,CAAxC;AACAL,EAAAA,SAAS,CAAC,MAAMI,GAAG,CAACS,WAAJ,GAAkBC,SAAlB,CAA4BF,cAA5B,CAAP,EAAoD,CAACA,cAAD,CAApD,CAAT;AACA,SAAO,IAAP;AACD,C,CAED;AACA;AACA;AACA;;GATgBD,uB;UACST,iB;;;KADTS,uB;AAUhB,OAAO,SAASI,cAAT,GAA0B;AAAA;;AAC/B,QAAMF,WAAW,GAAGV,cAAc,CAACE,YAAD,CAAlC;AAEA,SAAO,EACL,GAAGQ,WADE;AAELG,IAAAA,MAAM,EAAEZ,GAAG,CAACa,cAFP;AAGLC,IAAAA,KAAK,EAAEd,GAAG,CAACc,KAHN;AAILC,IAAAA,MAAM,EAAEf,GAAG,CAACe;AAJP,GAAP;AAMD;;IATeJ,c;UACMZ,c","sourcesContent":["// File: ./src/hooks/current-user.js\r\n\r\nimport {useEffect} from \"react\"\r\nimport {atom, useSetRecoilState, useRecoilValue} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\n// This is a Recoil atom (https://recoiljs.org/docs/api-reference/core/atom)\r\n// You can think of it as a unique reactive node with our current users state.\r\n// Our hook is going to subscribe to this state.\r\nexport const $currentUser = atom({\r\n  key: \"CURRENT_USER\", // Atoms needs a unique key, we can only ever call the atom function once with this key.\r\n  default: {addr: null, cid: null, loggedIn: null},\r\n})\r\n\r\n// We only want a single place where we subscribe and update our\r\n// current user's atom state. That will be this component that we will\r\n// add to the root of our application.\r\nexport function CurrentUserSubscription() {\r\n  const setCurrentUser = useSetRecoilState($currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setCurrentUser), [setCurrentUser])\r\n  return null\r\n}\r\n\r\n// Our actual hook, most of the work is happening\r\n// in our CurrentUserSubscription component so that allows\r\n// this hook to focus on decorating the current user value\r\n// we receive with some helper functions\r\nexport function useCurrentUser() {\r\n  const currentUser = useRecoilValue($currentUser)\r\n\r\n  return {\r\n    ...currentUser,\r\n    logOut: fcl.unauthenticate,\r\n    logIn: fcl.logIn,\r\n    signUp: fcl.signUp,\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}